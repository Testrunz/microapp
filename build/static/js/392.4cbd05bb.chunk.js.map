{"version":3,"file":"static/js/392.4cbd05bb.chunk.js","mappings":"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","sources":["../node_modules/mermaid/src/diagrams/class/classRenderer-v2.js","../node_modules/mermaid/src/diagrams/class/classDiagram-v2.ts"],"sourcesContent":["import { select } from 'd3';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { log } from '../../logger';\nimport { getConfig } from '../../config';\nimport { render } from '../../dagre-wrapper/index.js';\nimport utils from '../../utils';\nimport { curveLinear } from 'd3';\nimport { interpolateToCurve, getStylesFromArray } from '../../utils';\nimport { setupGraphViewbox } from '../../setupGraphViewbox';\nimport common from '../common/common';\n\nconst sanitizeText = (txt) => common.sanitizeText(txt, getConfig());\n\nlet conf = {\n  dividerMargin: 10,\n  padding: 5,\n  textHeight: 10,\n};\n\n/**\n * Function that adds the vertices found during parsing to the graph to be rendered.\n *\n * @param {Object<\n *   string,\n *   { cssClasses: string[]; text: string; id: string; type: string; domId: string }\n * >} classes\n *   Object containing the vertices.\n * @param {SVGGElement} g The graph that is to be drawn.\n * @param _id\n * @param diagObj\n */\nexport const addClasses = function (classes, g, _id, diagObj) {\n  // const svg = select(`[id=\"${svgId}\"]`);\n  const keys = Object.keys(classes);\n  log.info('keys:', keys);\n  log.info(classes);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  keys.forEach(function (id) {\n    const vertex = classes[id];\n\n    /**\n     * Variable for storing the classes for the vertex\n     *\n     * @type {string}\n     */\n    let cssClassStr = '';\n    if (vertex.cssClasses.length > 0) {\n      cssClassStr = cssClassStr + ' ' + vertex.cssClasses.join(' ');\n    }\n    // if (vertex.classes.length > 0) {\n    //   classStr = vertex.classes.join(' ');\n    // }\n\n    const styles = { labelStyle: '' }; //getStylesFromArray(vertex.styles);\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    let vertexText = vertex.text !== undefined ? vertex.text : vertex.id;\n\n    // We create a SVG label, either by delegating to addHtmlLabel or manually\n    // let vertexNode;\n    // if (evaluate(getConfig().flowchart.htmlLabels)) {\n    //   const node = {\n    //     label: vertexText.replace(\n    // eslint-disable-next-line @cspell/spellchecker\n    //       /fa[lrsb]?:fa-[\\w-]+/g,\n    //       s => `<i class='${s.replace(':', ' ')}'></i>`\n    //     )\n    //   };\n    //   vertexNode = addHtmlLabel(svg, node).node();\n    //   vertexNode.parentNode.removeChild(vertexNode);\n    // } else {\n    //   const svgLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n    //   svgLabel.setAttribute('style', styles.labelStyle.replace('color:', 'fill:'));\n\n    //   const rows = vertexText.split(common.lineBreakRegex);\n\n    //   for (let j = 0; j < rows.length; j++) {\n    //     const tspan = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n    //     tspan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');\n    //     tspan.setAttribute('dy', '1em');\n    //     tspan.setAttribute('x', '1');\n    //     tspan.textContent = rows[j];\n    //     svgLabel.appendChild(tspan);\n    //   }\n    //   vertexNode = svgLabel;\n    // }\n\n    let radious = 0;\n    let _shape = '';\n    // Set the shape based parameters\n    switch (vertex.type) {\n      case 'class':\n        _shape = 'class_box';\n        break;\n      default:\n        _shape = 'class_box';\n    }\n    // Add the node\n    g.setNode(vertex.id, {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText: sanitizeText(vertexText),\n      classData: vertex,\n      rx: radious,\n      ry: radious,\n      class: cssClassStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: vertex.domId,\n      tooltip: diagObj.db.getTooltip(vertex.id) || '',\n      haveCallback: vertex.haveCallback,\n      link: vertex.link,\n      width: vertex.type === 'group' ? 500 : undefined,\n      type: vertex.type,\n      padding: getConfig().flowchart.padding,\n    });\n\n    log.info('setNode', {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText: vertexText,\n      rx: radious,\n      ry: radious,\n      class: cssClassStr,\n      style: styles.style,\n      id: vertex.id,\n      width: vertex.type === 'group' ? 500 : undefined,\n      type: vertex.type,\n      padding: getConfig().flowchart.padding,\n    });\n  });\n};\n\n/**\n * Function that adds the additional vertices (notes) found during parsing to the graph to be rendered.\n *\n * @param {{text: string; class: string; placement: number}[]} notes\n *   Object containing the additional vertices (notes).\n * @param {SVGGElement} g The graph that is to be drawn.\n * @param {number} startEdgeId starting index for note edge\n * @param classes\n */\nexport const addNotes = function (notes, g, startEdgeId, classes) {\n  log.info(notes);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  notes.forEach(function (note, i) {\n    const vertex = note;\n\n    /**\n     * Variable for storing the classes for the vertex\n     *\n     * @type {string}\n     */\n    let cssNoteStr = '';\n\n    const styles = { labelStyle: '', style: '' };\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    let vertexText = vertex.text;\n\n    let radious = 0;\n    let _shape = 'note';\n    // Add the node\n    g.setNode(vertex.id, {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText: sanitizeText(vertexText),\n      noteData: vertex,\n      rx: radious,\n      ry: radious,\n      class: cssNoteStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: vertex.id,\n      tooltip: '',\n      type: 'note',\n      padding: getConfig().flowchart.padding,\n    });\n\n    log.info('setNode', {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText: vertexText,\n      rx: radious,\n      ry: radious,\n      style: styles.style,\n      id: vertex.id,\n      type: 'note',\n      padding: getConfig().flowchart.padding,\n    });\n\n    if (!vertex.class || !(vertex.class in classes)) {\n      return;\n    }\n    const edgeId = startEdgeId + i;\n    const edgeData = {};\n    //Set relationship style and line type\n    edgeData.classes = 'relation';\n    edgeData.pattern = 'dotted';\n\n    edgeData.id = `edgeNote${edgeId}`;\n    // Set link type for rendering\n    edgeData.arrowhead = 'none';\n\n    log.info(`Note edge: ${JSON.stringify(edgeData)}, ${JSON.stringify(vertex)}`);\n    //Set edge extra labels\n    edgeData.startLabelRight = '';\n    edgeData.endLabelLeft = '';\n\n    //Set relation arrow types\n    edgeData.arrowTypeStart = 'none';\n    edgeData.arrowTypeEnd = 'none';\n    let style = 'fill:none';\n    let labelStyle = '';\n\n    edgeData.style = style;\n    edgeData.labelStyle = labelStyle;\n\n    edgeData.curve = interpolateToCurve(conf.curve, curveLinear);\n\n    // Add the edge to the graph\n    g.setEdge(vertex.id, vertex.class, edgeData, edgeId);\n  });\n};\n\n/**\n * Add edges to graph based on parsed graph definition\n *\n * @param relations\n * @param {object} g The graph object\n */\nexport const addRelations = function (relations, g) {\n  const conf = getConfig().flowchart;\n  let cnt = 0;\n\n  let defaultStyle;\n  let defaultLabelStyle;\n\n  // if (typeof relations.defaultStyle !== 'undefined') {\n  //   const defaultStyles = getStylesFromArray(relations.defaultStyle);\n  //   defaultStyle = defaultStyles.style;\n  //   defaultLabelStyle = defaultStyles.labelStyle;\n  // }\n\n  relations.forEach(function (edge) {\n    cnt++;\n    const edgeData = {};\n    //Set relationship style and line type\n    edgeData.classes = 'relation';\n    edgeData.pattern = edge.relation.lineType == 1 ? 'dashed' : 'solid';\n\n    edgeData.id = 'id' + cnt;\n    // Set link type for rendering\n    if (edge.type === 'arrow_open') {\n      edgeData.arrowhead = 'none';\n    } else {\n      edgeData.arrowhead = 'normal';\n    }\n\n    log.info(edgeData, edge);\n    //Set edge extra labels\n    //edgeData.startLabelLeft = edge.relationTitle1;\n    edgeData.startLabelRight = edge.relationTitle1 === 'none' ? '' : edge.relationTitle1;\n    edgeData.endLabelLeft = edge.relationTitle2 === 'none' ? '' : edge.relationTitle2;\n    //edgeData.endLabelRight = edge.relationTitle2;\n\n    //Set relation arrow types\n    edgeData.arrowTypeStart = getArrowMarker(edge.relation.type1);\n    edgeData.arrowTypeEnd = getArrowMarker(edge.relation.type2);\n    let style = '';\n    let labelStyle = '';\n\n    if (edge.style !== undefined) {\n      const styles = getStylesFromArray(edge.style);\n      style = styles.style;\n      labelStyle = styles.labelStyle;\n    } else {\n      style = 'fill:none';\n      if (defaultStyle !== undefined) {\n        style = defaultStyle;\n      }\n      if (defaultLabelStyle !== undefined) {\n        labelStyle = defaultLabelStyle;\n      }\n    }\n\n    edgeData.style = style;\n    edgeData.labelStyle = labelStyle;\n\n    if (edge.interpolate !== undefined) {\n      edgeData.curve = interpolateToCurve(edge.interpolate, curveLinear);\n    } else if (relations.defaultInterpolate !== undefined) {\n      edgeData.curve = interpolateToCurve(relations.defaultInterpolate, curveLinear);\n    } else {\n      edgeData.curve = interpolateToCurve(conf.curve, curveLinear);\n    }\n\n    edge.text = edge.title;\n    if (edge.text === undefined) {\n      if (edge.style !== undefined) {\n        edgeData.arrowheadStyle = 'fill: #333';\n      }\n    } else {\n      edgeData.arrowheadStyle = 'fill: #333';\n      edgeData.labelpos = 'c';\n\n      if (getConfig().flowchart.htmlLabels) {\n        edgeData.labelType = 'html';\n        edgeData.label = '<span class=\"edgeLabel\">' + edge.text + '</span>';\n      } else {\n        edgeData.labelType = 'text';\n        edgeData.label = edge.text.replace(common.lineBreakRegex, '\\n');\n\n        if (edge.style === undefined) {\n          edgeData.style = edgeData.style || 'stroke: #333; stroke-width: 1.5px;fill:none';\n        }\n\n        edgeData.labelStyle = edgeData.labelStyle.replace('color:', 'fill:');\n      }\n    }\n    // Add the edge to the graph\n    g.setEdge(edge.id1, edge.id2, edgeData, cnt);\n  });\n};\n\n/**\n * Merges the value of `conf` with the passed `cnf`\n *\n * @param {object} cnf Config to merge\n */\nexport const setConf = function (cnf) {\n  const keys = Object.keys(cnf);\n\n  keys.forEach(function (key) {\n    conf[key] = cnf[key];\n  });\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param {string} text\n * @param {string} id\n * @param _version\n * @param diagObj\n */\nexport const draw = function (text, id, _version, diagObj) {\n  log.info('Drawing class - ', id);\n\n  const conf = getConfig().flowchart;\n  const securityLevel = getConfig().securityLevel;\n  log.info('config:', conf);\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n\n  // Create the input mermaid.graph\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n  })\n    .setGraph({\n      rankdir: diagObj.db.getDirection(),\n      nodesep: nodeSpacing,\n      ranksep: rankSpacing,\n      marginx: 8,\n      marginy: 8,\n    })\n    .setDefaultEdgeLabel(function () {\n      return {};\n    });\n\n  // Fetch the vertices/nodes and edges/links from the parsed graph definition\n  const classes = diagObj.db.getClasses();\n  const relations = diagObj.db.getRelations();\n  const notes = diagObj.db.getNotes();\n\n  log.info(relations);\n  addClasses(classes, g, id, diagObj);\n  addRelations(relations, g);\n  addNotes(notes, g, relations.length + 1, classes);\n\n  // Add custom shapes\n  // flowChartShapes.addToRenderV2(addShape);\n\n  // Set up an SVG group so that we can translate the final graph.\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  const svg = root.select(`[id=\"${id}\"]`);\n\n  // Run the renderer. This is what draws the final graph.\n  const element = root.select('#' + id + ' g');\n  render(\n    element,\n    g,\n    ['aggregation', 'extension', 'composition', 'dependency', 'lollipop'],\n    'classDiagram',\n    id\n  );\n\n  utils.insertTitle(svg, 'classTitleText', conf.titleTopMargin, diagObj.db.getDiagramTitle());\n\n  setupGraphViewbox(g, svg, conf.diagramPadding, conf.useMaxWidth);\n\n  // Add label rects for non html labels\n  if (!conf.htmlLabels) {\n    const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      // Get dimensions of label\n      const dim = label.getBBox();\n\n      const rect = doc.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      rect.setAttribute('rx', 0);\n      rect.setAttribute('ry', 0);\n      rect.setAttribute('width', dim.width);\n      rect.setAttribute('height', dim.height);\n      // rect.setAttribute('style', 'fill:#e8e8e8;');\n\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n\n  // If node has a link, wrap it in an anchor SVG object.\n  // const keys = Object.keys(classes);\n  // keys.forEach(function(key) {\n  //   const vertex = classes[key];\n\n  //   if (vertex.link) {\n  //     const node = select('#' + id + ' [id=\"' + key + '\"]');\n  //     if (node) {\n  //       const link = document.createElementNS('http://www.w3.org/2000/svg', 'a');\n  //       link.setAttributeNS('http://www.w3.org/2000/svg', 'class', vertex.classes.join(' '));\n  //       link.setAttributeNS('http://www.w3.org/2000/svg', 'href', vertex.link);\n  //       link.setAttributeNS('http://www.w3.org/2000/svg', 'rel', 'noopener');\n\n  //       const linkNode = node.insert(function() {\n  //         return link;\n  //       }, ':first-child');\n\n  //       const shape = node.select('.label-container');\n  //       if (shape) {\n  //         linkNode.append(function() {\n  //           return shape.node();\n  //         });\n  //       }\n\n  //       const label = node.select('.label');\n  //       if (label) {\n  //         linkNode.append(function() {\n  //           return label.node();\n  //         });\n  //       }\n  //     }\n  //   }\n  // });\n};\n\n/**\n * Gets the arrow marker for a type index\n *\n * @param {number} type The type to look for\n * @returns {'aggregation' | 'extension' | 'composition' | 'dependency'} The arrow marker\n */\nfunction getArrowMarker(type) {\n  let marker;\n  switch (type) {\n    case 0:\n      marker = 'aggregation';\n      break;\n    case 1:\n      marker = 'extension';\n      break;\n    case 2:\n      marker = 'composition';\n      break;\n    case 3:\n      marker = 'dependency';\n      break;\n    case 4:\n      marker = 'lollipop';\n      break;\n    default:\n      marker = 'none';\n  }\n  return marker;\n}\n\nexport default {\n  setConf,\n  draw,\n};\n","import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/classDiagram';\nimport db from './classDb';\nimport styles from './styles';\nimport renderer from './classRenderer-v2';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.class) {\n      cnf.class = {};\n    }\n    cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n"],"names":["sanitizeText","txt","g","conf","dividerMargin","padding","textHeight","getArrowMarker","type","marker","setConf","cnf","Object","keys","forEach","key","draw","text","id","_version","diagObj","l","flowchart","securityLevel","sandboxElement","nodeSpacing","rankSpacing","multigraph","compound","setGraph","rankdir","db","getDirection","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","classes","getClasses","relations","getRelations","notes","getNotes","_id","vertex","cssClassStr","cssClasses","length","join","styles","labelStyle","vertexText","_shape","setNode","shape","labelText","classData","rx","ry","class","style","domId","tooltip","getTooltip","haveCallback","link","width","addClasses","cnt","edge","edgeData","pattern","relation","lineType","arrowhead","startLabelRight","relationTitle1","endLabelLeft","relationTitle2","arrowTypeStart","type1","arrowTypeEnd","type2","interpolate","curve","defaultInterpolate","title","arrowheadStyle","labelpos","htmlLabels","labelType","label","replace","setEdge","id1","id2","addRelations","startEdgeId","note","i","noteData","edgeId","JSON","stringify","addNotes","root","nodes","contentDocument","body","svg","select","element","r","u","titleTopMargin","getDiagramTitle","s","diagramPadding","useMaxWidth","doc","document","labels","querySelectorAll","dim","getBBox","rect","createElementNS","setAttribute","height","insertBefore","firstChild","diagram","parser","p","d","renderer","init","arrowMarkerAbsolute"],"sourceRoot":""}
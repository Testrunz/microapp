{"version":3,"file":"static/js/725.2e229b9b.chunk.js","mappings":"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","sources":["../node_modules/lodash-es/clone.js","../node_modules/dagre-d3-es/src/graphlib/json.js","../node_modules/mermaid/src/dagre-wrapper/mermaid-graphlib.js","../node_modules/mermaid/src/dagre-wrapper/clusters.js","../node_modules/mermaid/src/dagre-wrapper/index.js"],"sourcesContent":["import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","/** Decorates with functions required by mermaids dagre-wrapper. */\nimport { log } from '../logger';\nimport * as graphlibJson from 'dagre-d3-es/src/graphlib/json.js';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\n\nexport let clusterDb = {};\nlet descendants = {};\nlet parents = {};\n\nexport const clear = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\n\nconst isDescendant = (id, ancenstorId) => {\n  // if (id === ancenstorId) return true;\n\n  log.trace('In isDecendant', ancenstorId, ' ', id, ' = ', descendants[ancenstorId].includes(id));\n  if (descendants[ancenstorId].includes(id)) {\n    return true;\n  }\n\n  return false;\n};\n\nconst edgeInCluster = (edge, clusterId) => {\n  log.info('Decendants of ', clusterId, ' is ', descendants[clusterId]);\n  log.info('Edge is ', edge);\n  // Edges to/from the cluster is not in the cluster, they are in the parent\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n\n  if (!descendants[clusterId]) {\n    log.debug('Tilt, ', clusterId, ',not in decendants');\n    return false;\n  }\n  return (\n    descendants[clusterId].includes(edge.v) ||\n    isDescendant(edge.v, clusterId) ||\n    isDescendant(edge.w, clusterId) ||\n    descendants[clusterId].includes(edge.w)\n  );\n};\n\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    'Copying children of ',\n    clusterId,\n    'root',\n    rootId,\n    'data',\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n\n  // Include cluster node if it is not the root\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n\n  log.warn('Copying (nodes) clusterId', clusterId, 'nodes', nodes);\n\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info('cp ', node, ' to ', rootId, ' with parent ', clusterId); //,node, data, ' parent is ', clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn('Setting parent', node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug('Setting parent', node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info('In copy ', clusterId, 'root', rootId, 'data', graph.node(clusterId), rootId);\n        log.debug(\n          'Not Setting parent for node=',\n          node,\n          'cluster!==rootId',\n          clusterId !== rootId,\n          'node!==clusterId',\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug('Copying Edges', edges);\n      edges.forEach((edge) => {\n        log.info('Edge', edge);\n        const data = graph.edge(edge.v, edge.w, edge.name);\n        log.info('Edge data', data, rootId);\n        try {\n          // Do not copy edges in and out of the root cluster, they belong to the parent graph\n          if (edgeInCluster(edge, rootId)) {\n            log.info('Copying as ', edge.v, edge.w, data, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data, edge.name);\n            log.info('newGraph edges ', newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              'Skipping copy of edge ',\n              edge.v,\n              '-->',\n              edge.w,\n              ' rootId: ',\n              rootId,\n              ' clusterId:',\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug('Removing node', node);\n    graph.removeNode(node);\n  });\n};\nexport const extractDescendants = (id, graph) => {\n  // log.debug('Extracting ', id);\n  const children = graph.children(id);\n  let res = [...children];\n\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n\n  return res;\n};\n\n/**\n * Validates the graph, checking that all parent child relation points to existing nodes and that\n * edges between nodes also ia correct. When not correct the function logs the discrepancies.\n *\n * @param graph\n */\nexport const validate = (graph) => {\n  const edges = graph.edges();\n  log.trace('Edges: ', edges);\n  for (const edge of edges) {\n    if (graph.children(edge.v).length > 0) {\n      log.trace('The node ', edge.v, ' is part of and edge even though it has children');\n      return false;\n    }\n    if (graph.children(edge.w).length > 0) {\n      log.trace('The node ', edge.w, ' is part of and edge even though it has children');\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Finds a child that is not a cluster. When faking an edge between a node and a cluster.\n *\n * @param id\n * @param {any} graph\n */\nexport const findNonClusterChild = (id, graph) => {\n  // const node = graph.node(id);\n  log.trace('Searching', id);\n  // const children = graph.children(id).reverse();\n  const children = graph.children(id); //.reverse();\n  log.trace('Searching children of id ', id, children);\n  if (children.length < 1) {\n    log.trace('This is a valid node', id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace('Found replacement for', id, ' => ', _id);\n      return _id;\n    }\n  }\n};\n\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  // If the cluster has no external connections\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n\n  // Return the replacement node\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\n\nexport const adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug('Opting out, no graph ');\n    return;\n  } else {\n    log.debug('Opting in, graph ');\n  }\n  // Go through the nodes and for each cluster found, save a replacement node, this can be used when\n  // faking a link to a cluster\n  graph.nodes().forEach(function (id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        'Cluster identified',\n        id,\n        ' Replacement id in edges: ',\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n\n  // Check incoming and outgoing edges for each cluster\n  graph.nodes().forEach(function (id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug('Cluster identified', id, descendants);\n      edges.forEach((edge) => {\n        // log.debug('Edge, decendants: ', edge, decendants[id]);\n\n        // Check if any edge leaves the cluster (not the actual cluster, that's a link from the box)\n        if (edge.v !== id && edge.w !== id) {\n          // Any edge where either the one of the nodes is descending to the cluster but not the other\n          // if (decendants[id].indexOf(edge.v) < 0 && decendants[id].indexOf(edge.w) < 0) {\n\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n\n          // d1 xor d2 - if either d1 is true and d2 is false or the other way around\n          if (d1 ^ d2) {\n            log.warn('Edge: ', edge, ' leaves cluster ', id);\n            log.warn('Decendants of XXX ', id, ': ', descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug('Not a cluster ', id, descendants);\n    }\n  });\n\n  // For clusters with incoming and/or outgoing edges translate those edges to a real node\n  // in the cluster in order to fake the edge\n  graph.edges().forEach(function (e) {\n    const edge = graph.edge(e);\n    log.warn('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(e));\n    log.warn('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(graph.edge(e)));\n\n    let v = e.v;\n    let w = e.w;\n    // Check if link is either from or to a cluster\n    log.warn(\n      'Fix XXX',\n      clusterDb,\n      'ids:',\n      e.v,\n      e.w,\n      'Translating: ',\n      clusterDb[e.v],\n      ' --- ',\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn('Fixing and trixing link to self - removing XXX', e.v, e.w, e.name);\n      log.warn('Fixing and trixing - removing XXX', e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + '---' + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: '',\n        labelText: edge.label,\n        padding: 0,\n        shape: 'labelRect',\n        style: '',\n      });\n      const edge1 = JSON.parse(JSON.stringify(edge));\n      const edge2 = JSON.parse(JSON.stringify(edge));\n      edge1.label = '';\n      edge1.arrowTypeEnd = 'none';\n      edge2.label = '';\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n\n      graph.setEdge(v, specialId, edge1, e.name + '-cyclic-special');\n      graph.setEdge(specialId, w, edge2, e.name + '-cyclic-special');\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn('Fixing and trixing - removing XXX', e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        edge.toCluster = e.w;\n      }\n      log.warn('Fix Replacing with XXX', v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn('Adjusted Graph', graphlibJson.write(graph));\n  extractor(graph, 0);\n\n  log.trace(clusterDb);\n\n  // Remove references to extracted cluster\n  // graph.edges().forEach(edge => {\n  //   if (isDecendant(edge.v, clusterId) || isDecendant(edge.w, clusterId)) {\n  //     graph.removeEdge(edge);\n  //   }\n  // });\n};\n\nexport const extractor = (graph, depth) => {\n  log.warn('extractor - ', depth, graphlibJson.write(graph), graph.children('D'));\n  if (depth > 10) {\n    log.error('Bailing out');\n    return;\n  }\n  // For clusters without incoming and/or outgoing edges, create a new cluster-node\n  // containing the nodes and edges in the custer in a new graph\n  // for (let i = 0;)\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n\n  if (!hasChildren) {\n    log.debug('Done, no node has children', graph.nodes());\n    return;\n  }\n  // const clusters = Object.keys(clusterDb);\n  // clusters.forEach(clusterId => {\n  log.debug('Nodes = ', nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      'Extracting node',\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children('D'),\n      ' Depth ',\n      depth\n    );\n    // Note that the node might have been removed after the Object.keys call so better check\n    // that it still is in the game\n    if (!clusterDb[node]) {\n      // Skip if the node is not a cluster\n      log.debug('Not a cluster', node, depth);\n      // break;\n    } else if (\n      !clusterDb[node].externalConnections &&\n      // !graph.parent(node) &&\n      graph.children(node) &&\n      graph.children(node).length > 0\n    ) {\n      log.warn(\n        'Cluster without external connections, without a parent and with children',\n        node,\n        depth\n      );\n\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === 'TB' ? 'LR' : 'TB';\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn('Fixing dir', clusterDb[node].clusterData.dir, dir);\n      }\n\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true,\n      })\n        .setGraph({\n          rankdir: dir, // Todo: set proper spacing\n          nodesep: 50,\n          ranksep: 50,\n          marginx: 8,\n          marginy: 8,\n        })\n        .setDefaultEdgeLabel(function () {\n          return {};\n        });\n\n      log.warn('Old graph before copy', graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph,\n      });\n      log.warn('New graph after copy node: (', node, ')', graphlibJson.write(clusterGraph));\n      log.debug('Old graph after copy', graphlibJson.write(graph));\n    } else {\n      log.warn(\n        'Cluster ** ',\n        node,\n        ' **not meeting the criteria !externalConnections:',\n        !clusterDb[node].externalConnections,\n        ' no parent: ',\n        !graph.parent(node),\n        ' children ',\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children('D'),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n\n  nodes = graph.nodes();\n  log.warn('New list of nodes', nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(' Now next level', node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\n\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n\n  return result;\n};\n\nexport const sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\n","import intersectRect from './intersect/intersect-rect';\nimport { log } from '../logger';\nimport createLabel from './createLabel';\nimport { select } from 'd3';\nimport { getConfig } from '../config';\nimport { evaluate } from '../diagrams/common/common';\n\nconst rect = (parent, node) => {\n  log.trace('Creating subgraph rect for ', node.id, node);\n\n  // Add outer g element\n  const shapeSvg = parent\n    .insert('g')\n    .attr('class', 'cluster' + (node.class ? ' ' + node.class : ''))\n    .attr('id', node.id);\n\n  // add the rect\n  const rect = shapeSvg.insert('rect', ':first-child');\n\n  // Create the label and insert it after the rect\n  const label = shapeSvg.insert('g').attr('class', 'cluster-label');\n\n  const text = label\n    .node()\n    .appendChild(createLabel(node.labelText, node.labelStyle, undefined, true));\n\n  // Get the size of the label\n  let bbox = text.getBBox();\n\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr('width', bbox.width);\n    dv.attr('height', bbox.height);\n  }\n\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n\n  log.trace('Data ', node, JSON.stringify(node));\n  // center the rect around its coordinate\n  rect\n    .attr('style', node.style)\n    .attr('rx', node.rx)\n    .attr('ry', node.ry)\n    .attr('x', node.x - width / 2)\n    .attr('y', node.y - node.height / 2 - halfPadding)\n    .attr('width', width)\n    .attr('height', node.height + padding);\n\n  // Center the label\n  label.attr(\n    'transform',\n    // This puts the labal on top of the box instead of inside it\n    // 'translate(' + (node.x - bbox.width / 2) + ', ' + (node.y - node.height / 2 - bbox.height) + ')'\n    'translate(' + (node.x - bbox.width / 2) + ', ' + (node.y - node.height / 2) + ')'\n  );\n\n  const rectBox = rect.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n};\n\n/**\n * Non visible cluster where the note is group with its\n *\n * @param {any} parent\n * @param {any} node\n * @returns {any} ShapeSvg\n */\nconst noteGroup = (parent, node) => {\n  // Add outer g element\n  const shapeSvg = parent.insert('g').attr('class', 'note-cluster').attr('id', node.id);\n\n  // add the rect\n  const rect = shapeSvg.insert('rect', ':first-child');\n\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n\n  // center the rect around its coordinate\n  rect\n    .attr('rx', node.rx)\n    .attr('ry', node.ry)\n    .attr('x', node.x - node.width / 2 - halfPadding)\n    .attr('y', node.y - node.height / 2 - halfPadding)\n    .attr('width', node.width + padding)\n    .attr('height', node.height + padding)\n    .attr('fill', 'none');\n\n  const rectBox = rect.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  // Add outer g element\n  const shapeSvg = parent.insert('g').attr('class', node.classes).attr('id', node.id);\n\n  // add the rect\n  const rect = shapeSvg.insert('rect', ':first-child');\n\n  // Create the label and insert it after the rect\n  const label = shapeSvg.insert('g').attr('class', 'cluster-label');\n  const innerRect = shapeSvg.append('rect');\n\n  const text = label\n    .node()\n    .appendChild(createLabel(node.labelText, node.labelStyle, undefined, true));\n\n  // Get the size of the label\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr('width', bbox.width);\n    dv.attr('height', bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n\n  // center the rect around its coordinate\n  rect\n    .attr('class', 'outer')\n    .attr('x', node.x - width / 2 - halfPadding)\n    .attr('y', node.y - node.height / 2 - halfPadding)\n    .attr('width', width + padding)\n    .attr('height', node.height + padding);\n  innerRect\n    .attr('class', 'inner')\n    .attr('x', node.x - width / 2 - halfPadding)\n    .attr('y', node.y - node.height / 2 - halfPadding + bbox.height - 1)\n    .attr('width', width + padding)\n    .attr('height', node.height + padding - bbox.height - 3);\n\n  // Center the label\n  label.attr(\n    'transform',\n    'translate(' +\n      (node.x - bbox.width / 2) +\n      ', ' +\n      (node.y -\n        node.height / 2 -\n        node.padding / 3 +\n        (evaluate(getConfig().flowchart.htmlLabels) ? 5 : 3)) +\n      ')'\n  );\n\n  const rectBox = rect.node().getBBox();\n  node.height = rectBox.height;\n\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n};\n\nconst divider = (parent, node) => {\n  // Add outer g element\n  const shapeSvg = parent.insert('g').attr('class', node.classes).attr('id', node.id);\n\n  // add the rect\n  const rect = shapeSvg.insert('rect', ':first-child');\n\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n\n  // center the rect around its coordinate\n  rect\n    .attr('class', 'divider')\n    .attr('x', node.x - node.width / 2 - halfPadding)\n    .attr('y', node.y - node.height / 2)\n    .attr('width', node.width + padding)\n    .attr('height', node.height + padding);\n\n  const rectBox = rect.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n};\n\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\n\nlet clusterElems = {};\n\nexport const insertCluster = (elem, node) => {\n  log.trace('Inserting cluster');\n  const shape = node.shape || 'rect';\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nexport const getClusterTitleWidth = (elem, node) => {\n  const label = createLabel(node.labelText, node.labelStyle, undefined, true);\n  elem.node().appendChild(label);\n  const width = label.getBBox().width;\n  elem.node().removeChild(label);\n  return width;\n};\n\nexport const clear = () => {\n  clusterElems = {};\n};\n\nexport const positionCluster = (node) => {\n  log.info('Position cluster (' + node.id + ', ' + node.x + ', ' + node.y + ')');\n  const el = clusterElems[node.id];\n\n  el.attr('transform', 'translate(' + node.x + ', ' + node.y + ')');\n};\n","import { layout as dagreLayout } from 'dagre-d3-es/src/dagre/index.js';\nimport * as graphlibJson from 'dagre-d3-es/src/graphlib/json.js';\nimport insertMarkers from './markers';\nimport { updateNodeBounds } from './shapes/util';\nimport {\n  clear as clearGraphlib,\n  clusterDb,\n  adjustClustersAndEdges,\n  findNonClusterChild,\n  sortNodesByHierarchy,\n} from './mermaid-graphlib';\nimport { insertNode, positionNode, clear as clearNodes, setNodeElem } from './nodes';\nimport { insertCluster, clear as clearClusters } from './clusters';\nimport { insertEdgeLabel, positionEdgeLabel, insertEdge, clear as clearEdges } from './edges';\nimport { log } from '../logger';\n\nconst recursiveRender = (_elem, graph, diagramtype, parentCluster) => {\n  log.info('Graph in recursive render: XXX', graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace('Dir in recursive render - dir:', dir);\n\n  const elem = _elem.insert('g').attr('class', 'root');\n  if (!graph.nodes()) {\n    log.info('No nodes found for', graph);\n  } else {\n    log.info('Recursive render XXX', graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace('Recursive edges', graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert('g').attr('class', 'clusters');\n  const edgePaths = elem.insert('g').attr('class', 'edgePaths');\n  const edgeLabels = elem.insert('g').attr('class', 'edgeLabels');\n  const nodes = elem.insert('g').attr('class', 'nodes');\n\n  // Insert nodes, this will insert them into the dom and each node will get a size. The size is updated\n  // to the abstract node and is later used by dagre for the layout\n  graph.nodes().forEach(function (v) {\n    const node = graph.node(v);\n    if (parentCluster !== undefined) {\n      const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n      // data.clusterPositioning = true;\n      log.info('Setting data for cluster XXX (', v, ') ', data, parentCluster);\n      graph.setNode(parentCluster.id, data);\n      if (!graph.parent(v)) {\n        log.trace('Setting parent', v, parentCluster.id);\n        graph.setParent(v, parentCluster.id, data);\n      }\n    }\n    log.info('(Insert) Node XXX' + v + ': ' + JSON.stringify(graph.node(v)));\n    if (node && node.clusterNode) {\n      // const children = graph.children(v);\n      log.info('Cluster identified', v, node.width, graph.node(v));\n      const o = recursiveRender(nodes, node.graph, diagramtype, graph.node(v));\n      const newEl = o.elem;\n      updateNodeBounds(node, newEl);\n      node.diff = o.diff || 0;\n      log.info('Node bounds (abc123)', v, node, node.width, node.x, node.y);\n      setNodeElem(newEl, node);\n\n      log.warn('Recursive render complete ', newEl, node);\n    } else {\n      if (graph.children(v).length > 0) {\n        // This is a cluster but not to be rendered recursively\n        // Render as before\n        log.info('Cluster - the non recursive path XXX', v, node.id, node, graph);\n        log.info(findNonClusterChild(node.id, graph));\n        clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n        // insertCluster(clusters, graph.node(v));\n      } else {\n        log.info('Node - the non recursive path', v, node.id, node);\n        insertNode(nodes, graph.node(v), dir);\n      }\n    }\n  });\n\n  // Insert labels, this will insert them into the dom so that the width can be calculated\n  // Also figure out which edges point to/from clusters and adjust them accordingly\n  // Edges from/to clusters really points to the first child in the cluster.\n  // TODO: pick optimal child in the cluster to us as link anchor\n  graph.edges().forEach(function (e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(e));\n    log.info('Edge ' + e.v + ' -> ' + e.w + ': ', e, ' ', JSON.stringify(graph.edge(e)));\n\n    // Check if link is either from or to a cluster\n    log.info('Fix', clusterDb, 'ids:', e.v, e.w, 'Translateing: ', clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n\n  graph.edges().forEach(function (e) {\n    log.info('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(e));\n  });\n  log.info('#############################################');\n  log.info('###                Layout                 ###');\n  log.info('#############################################');\n  log.info(graph);\n  dagreLayout(graph);\n  log.info('Graph after layout:', graphlibJson.write(graph));\n  // Move the nodes to the correct place\n  let diff = 0;\n  sortNodesByHierarchy(graph).forEach(function (v) {\n    const node = graph.node(v);\n    log.info('Position ' + v + ': ' + JSON.stringify(graph.node(v)));\n    log.info(\n      'Position ' + v + ': (' + node.x,\n      ',' + node.y,\n      ') width: ',\n      node.width,\n      ' height: ',\n      node.height\n    );\n    if (node && node.clusterNode) {\n      // clusterDb[node.id].node = node;\n\n      positionNode(node);\n    } else {\n      // Non cluster node\n      if (graph.children(v).length > 0) {\n        // A cluster in the non-recursive way\n        // positionCluster(node);\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        positionNode(node);\n      }\n    }\n  });\n\n  // Move the edge labels to the correct place after layout\n  graph.edges().forEach(function (e) {\n    const edge = graph.edge(e);\n    log.info('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(edge), edge);\n\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramtype, graph);\n    positionEdgeLabel(edge, paths);\n  });\n\n  graph.nodes().forEach(function (v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === 'group') {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\n\nexport const render = (elem, graph, markers, diagramtype, id) => {\n  insertMarkers(elem, markers, diagramtype, id);\n  clearNodes();\n  clearEdges();\n  clearClusters();\n  clearGraphlib();\n\n  log.warn('Graph at first:', graphlibJson.write(graph));\n  adjustClustersAndEdges(graph);\n  log.warn('Graph after:', graphlibJson.write(graph));\n  // log.warn('Graph ever  after:', graphlibJson.write(graph.node('A').graph));\n  recursiveRender(elem, graph, diagramtype);\n};\n\n// const shapeDefinitions = {};\n// export const addShape = ({ shapeType: fun }) => {\n//   shapeDefinitions[shapeType] = fun;\n// };\n\n// const arrowDefinitions = {};\n// export const addArrow = ({ arrowType: fun }) => {\n//   arrowDefinitions[arrowType] = fun;\n// };\n"],"names":["value","baseClone","write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","_","graph","v","nodeValue","node","parent","e","edgeValue","edge","w","name","clusterDb","descendants","parents","isDescendant","id","ancenstorId","l","includes","copy","clusterId","newGraph","rootId","children","push","forEach","length","data","setNode","setParent","edgeInCluster","setEdge","removeNode","extractDescendants","res","child","findNonClusterChild","_id","getAnchorId","externalConnections","adjustClustersAndEdges","depth","clusterData","JSON","stringify","removeEdge","specialId","domId","labelStyle","labelText","label","padding","shape","style","edge1","parse","edge2","arrowTypeEnd","fromCluster","toCluster","extractor","hasChildren","dir","rankdir","clusterGraph","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","sorter","result","Object","assign","sorted","sortNodesByHierarchy","shapes","rect","shapeSvg","insert","attr","class","text","appendChild","c","bbox","getBBox","flowchart","htmlLabels","div","dv","getBoundingClientRect","width","height","halfPadding","diff","rx","ry","x","y","rectBox","intersect","point","i","roundedWithTitle","classes","innerRect","append","noteGroup","divider","clusterElems","recursiveRender","_elem","diagramtype","parentCluster","elem","clusters","edgePaths","edgeLabels","o","newEl","u","s","dagreLayout","p","insertCluster","paths","n","type","render","markers","clearNodes","clearEdges"],"sourceRoot":""}